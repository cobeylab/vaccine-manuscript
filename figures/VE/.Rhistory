social_ARR = ggplot(socialdata %>% filter(rate != 0) %>% mutate(rate = factor(rate)), aes(x=rate, y = ARR, color = type)) +
stat_summary(fun.data = 'mean_cl_boot', aes(color = type), position=position_dodge(width=.5)) +
coord_flip()+
plot_themes + scale_color_brewer(palette = 'Dark2') + xlab("Vaccination coverage") + ylab('Social benefit (ARR)')
plotdata=socialdata %>%
group_by(rate, type) %>%
do(data.frame(rbind(smean.cl.boot(.$benefit)))) %>%
rename(benefit = Mean,
lowerCI = Lower,
upperCI = Upper)
# social = ggplot(socialdata %>% filter(rate != 0) %>% mutate(rate = factor(rate)), aes(x=rate, y = benefit, color = type)) +
#   stat_summary(fun.data = 'mean_cl_boot', aes(color = type), position=position_dodge(width=.5)) +
#   coord_flip()+ ylim(0,1.5) +
#   plot_themes + scale_color_brewer(palette = 'Dark2') + xlab("Vaccination rate") + ylab('Social benefit (1 - Odds ratio)')
#
social = ggplot(plotdata %>% filter(rate != 0) , aes(x=rate, y = benefit, color = type)) +
geom_point(position = pd) +
geom_errorbar(aes(ymin = lowerCI, ymax=upperCI), width=.2, position=pd)+
coord_flip()+ ylim(-.1,1) +
plot_themes + scale_color_brewer(palette = 'Dark2') + xlab("Vaccination coverage") + ylab('Social benefit (1 - Odds ratio)')
legend = get_legend(social + theme(legend.position ='bottom'))
outrow = plot_grid(social + theme(legend.position = 'none'),
private +  theme(legend.position = 'none'),
labels=c('A', 'B',''), nrow = 2)
outplot_OR = plot_grid(outrow, legend, ncol=1, rel_heights = c(1,.04))
outplot_OR = plot_grid(social, private, labels='AUTO', nrow = 2)
#outplot_ARR = plot_grid(social_ARR, private_ARR, labels='AUTO', nrow = 2)
save_plot("VE_OR_fromincidence.pdf", outplot_OR, nrow=2, base_aspect_ratio = 1.5)
#save_plot("VE_ARR_fromincidence_021420.pdf", outplot_ARR, nrow=2, base_aspect_ratio = 1.5)
library(tidyverse)
library(viridis)
library(cowplot)
library(vroom)
library(Hmisc)
textSize = 12
plot_themes  =	theme_classic() +
theme(axis.ticks = element_line(size=.5, color = 'black'),
axis.ticks.length = unit(-4,'pt'),
axis.text.x=element_text(size = textSize, color='black', margin=margin(7,7,0,7,'pt')),
axis.text.y=element_text(size = textSize, color='black', margin=margin(7,7,7,0,'pt')),
axis.title=element_text(size= textSize, color='black'),
plot.title=element_text(size=textSize+2, color='black'),
plot.margin=unit(c(9,9,9,9),'pt'),
legend.margin=margin(l = 8, unit='pt'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.line = element_blank()
)
#for reference
WRITESAMPLERATEI = 1
WRITESAMPLERATES = 1
get_data = function(filename, simtype){
raw_data = vroom(filename)
data = raw_data %>% mutate(I = ifelse(is.na(I), 0, I),
V = ifelse(is.na(V), 0, V))
data = data %>% mutate(runId = paste0(runId,simtype)) %>%
#group_by(runId, time) %>%
group_by(runId) %>%
mutate(VI = (V==1 & I==1),
VU = (V==1 & I==0),
NI = (V==0 & I==1),
NU = (V==0 & I==0)) %>%
#filter(extinctNow == 0) %>%
summarise(VI = sum(VI)*1/WRITESAMPLERATEI,
VU = sum(VU)*1/WRITESAMPLERATES,
NI = sum(NI)*1/WRITESAMPLERATEI,
NU = sum(NU)*1/WRITESAMPLERATES,
rate = mean(VR.init)) %>%
mutate(VE = 1-(VI/(VU))/(NI/(NU))) %>%
mutate(VE = ifelse(is.nan(VE), 0, VE)) %>%
mutate(ARR = NI/(NI+NU) - VI/(VI+VU)) %>%
ungroup() %>%
mutate(type = simtype)
return(data)
}
summarize_data = function(data){
data_summ = data %>%
group_by(runId) %>%
summarise(VE_arithmetic = mean(VE, na.rm=T),
VE = exp(mean(log(VE), na.rm=T)),
ARR = mean(ARR),
rate = mean(rate),
type = unique(type),
n=n())
return(data_summ)
}
read_data = function(){
data_orig = rbind(get_data('dynamic.csv','dynamic'),
get_data('static.csv', 'static'))
return(data_orig)
}
data_orig = read_data()
data = data_orig %>%
mutate(rate = factor(rate, levels= c(0, .01, .05, .1, .2, .3)))
# data_summ = summarize_data(data) %>%
#   mutate(rate = factor(rate)) %>%
#   mutate(VE_arithmetic = ifelse(is.infinite(VE_arithmetic), 0, VE_arithmetic))
data_nozero = data %>% filter(rate!=0)
plotdata=data_nozero %>%
group_by(rate, type) %>%
do(data.frame(rbind(smean.cl.boot(.$VE)))) %>%
rename(VE = Mean,
lowerCI = Lower,
upperCI = Upper)
pd = position_dodge(width = 0.5)
private = ggplot(plotdata,
aes(x=rate, y = VE, color = type)) +
geom_point(position = pd) +
geom_errorbar(aes(ymin = lowerCI, ymax=upperCI), width=.2, position=pd)+
coord_flip() + ylim(-.27,1) +
plot_themes + scale_color_brewer(palette = 'Dark2') + xlab("Vaccine coverage") + ylab('Private benefit (1 - Odds ratio)')
# private = ggplot(data_nozero,
#                  aes(x=rate, y = VE, color = type)) +
#   stat_summary(fun.data=mean_cl_boot, position=pd) +
#   coord_flip() + ylim(0,1) +
#   plot_themes + scale_color_brewer(palette = 'Dark2') + xlab("Vaccination rate") + ylab('Private benefit (1 - Odds ratio)')
#
private_ARR = ggplot(data %>% filter(as.numeric(as.character(rate))> 0), aes(x=rate, y = ARR, color = type)) +
stat_summary(fun.data = 'mean_cl_boot', aes(color = type), position=position_dodge(width=.5)) +
coord_flip()+
plot_themes + scale_color_brewer(palette = 'Dark2') + xlab("Vaccine coverage") + ylab('Private benefit (ARR)')
socialdata = data %>%
group_by(runId) %>%
summarise(I = mean(NI),#sum(VI + NI),
U = mean(NU),#sum(VU + NU),
rate = unique(rate),
type = unique(type)) %>%
mutate(OR = I/U)
zerovac = socialdata %>% filter(rate==0) %>%
summarise(meanOR = mean(I/U),
meanrisk = mean(I/(I+U)))
socialdata = socialdata %>%
mutate(benefit = 1- OR/zerovac$meanOR,
ARR = zerovac$meanrisk - I/(I+U))
social_ARR = ggplot(socialdata %>% filter(rate != 0) %>% mutate(rate = factor(rate)), aes(x=rate, y = ARR, color = type)) +
stat_summary(fun.data = 'mean_cl_boot', aes(color = type), position=position_dodge(width=.5)) +
coord_flip()+
plot_themes + scale_color_brewer(palette = 'Dark2') + xlab("Vaccination coverage") + ylab('Social benefit (ARR)')
plotdata=socialdata %>%
group_by(rate, type) %>%
do(data.frame(rbind(smean.cl.boot(.$benefit)))) %>%
rename(benefit = Mean,
lowerCI = Lower,
upperCI = Upper)
# social = ggplot(socialdata %>% filter(rate != 0) %>% mutate(rate = factor(rate)), aes(x=rate, y = benefit, color = type)) +
#   stat_summary(fun.data = 'mean_cl_boot', aes(color = type), position=position_dodge(width=.5)) +
#   coord_flip()+ ylim(0,1.5) +
#   plot_themes + scale_color_brewer(palette = 'Dark2') + xlab("Vaccination rate") + ylab('Social benefit (1 - Odds ratio)')
#
social = ggplot(plotdata %>% filter(rate != 0) , aes(x=rate, y = benefit, color = type)) +
geom_point(position = pd) +
geom_errorbar(aes(ymin = lowerCI, ymax=upperCI), width=.2, position=pd)+
coord_flip()+ ylim(-.1,1) +
plot_themes + scale_color_brewer(palette = 'Dark2') + xlab("Vaccination coverage") + ylab('Social benefit (1 - Odds ratio)')
legend = get_legend(social + theme(legend.position ='bottom'))
outrow = plot_grid(social + theme(legend.position = 'none'),
private +  theme(legend.position = 'none'),
labels=c('A', 'B',''), nrow = 2)
outplot_OR = plot_grid(outrow, legend, ncol=1, rel_heights = c(1,.04))
outplot_OR = plot_grid(social, private, labels='AUTO', nrow = 2)
#outplot_ARR = plot_grid(social_ARR, private_ARR, labels='AUTO', nrow = 2)
save_plot("VE_OR_fromincidence.pdf", outplot_OR, nrow=2, base_aspect_ratio = 1.5)
#save_plot("VE_ARR_fromincidence_021420.pdf", outplot_ARR, nrow=2, base_aspect_ratio = 1.5)
setwd("/Volumes/frankwen-1/vaccine-manuscript/figures/extinct_breadth_1")
setwd("/Volumes/frankwen-1/vaccine-manuscript/figures/extinct_breadth_1")
library(RSQLite)
library(ggplot2)
library(sensitivity)
library(gridExtra)
library(grid)
library(scales)
library(viridis)
library(plyr)
library(cowplot)
textSize = 11
pointSize = 1.0
lineSize = 1
plot_themes  = 	theme_classic() +
theme(axis.line = element_line(size=1)) +
theme(axis.ticks = element_line(size=0.5)) +
theme(axis.ticks.length = unit(-0.1,'cm')) +
theme(axis.title.x=element_text(size=textSize)) +
theme(axis.text.x=element_text(size= textSize, margin=margin(5,5,5,5,'pt'))) +
theme(axis.title.y=element_text(size= textSize)) +
theme(axis.text.y=element_text(size= textSize, margin=margin(5,5,5,5,'pt'))) +
theme(plot.title=element_text(size=textSize+2)) +
theme(plot.margin=unit(c(4,4,0,4),'mm')) +
theme(legend.title=element_text(size=textSize)) +
theme(legend.text=element_text(size=textSize)) +
theme(legend.position ='bottom') +
theme(legend.direction='horizontal') +
theme(legend.box.margin = margin(0,0,0,0,'mm')) +
theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
theme(axis.line = element_blank())
percentile = function(percentile){
function(x) quantile(x, percentile, na.rm=T)
}
makeExtinctDensity = function(vaccineDF, nbreaks=41){
rates = sort(unique(vaccineDF$vaccinationRate))
dens = data.frame(matrix(nrow = length(rates) * (nbreaks-1), ncol=4))
names(dens) = c('vaccinationRate','lastDate','density','mean')
for(i in 1:length(rates)){
rate = rates[i]
breaks = seq(0,21,length=nbreaks)
subDF = vaccineDF[vaccineDF$vaccinationRate == rate,]
drift.hist = hist(subDF$lastDate, breaks=breaks,xlim=c(0,c(max(vaccineDF$lastDate))), plot=FALSE)
drift.dens = drift.hist$counts/(sum(drift.hist$counts))
tmp = cbind(rep(rate,length(breaks)-1),drift.hist$breaks[1:length(breaks)-1],drift.dens,mean(subDF$lastDate))
start.index = ((i-1)*(length(breaks)-1))+1
dens[start.index:(start.index+length(breaks)-2),] = tmp
}
return(dens)
}
make.extinct.plot = function(extinctDens, summaryDF,plotName, vaccineDF){
extinct.plot = ggplot(summaryDF, aes(x=vaccinationRate, y=extinct/500)) +
xlab('Vaccination coverage') +
ylab('Fraction extinct') +
geom_point(size=0.5) +
plot_themes
time.plot = ggplot(data = extinctDens, aes(x=vaccinationRate,y=lastDate)) +
xlab('Vaccination coverage') +
ylab('Time to extinction') +
geom_tile(aes(fill=density)) +
scale_fill_viridis(option='plasma') +
guides(fill=guide_colorbar(barwidth=11,barheight=0.5, title.position = 'top')) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme(panel.border = element_rect(colour = "black", fill=NA, size=.2)) +
theme(axis.ticks = element_line(size=.1))  +
stat_summary(data = vaccineDF,
fun.data = "mean_cl_boot",
geom = 'errorbar',
size = .5,
color = 'white') +
geom_point(data = vaccineDF, stat = 'summary',
fun.y = 'mean',
color = 'white', size = .5) +
# geom_errorbar(data = vaccineDF, stat = 'summary',
#               fun.ymin = percentile(.05),
#               fun.ymax = percentile(.95),
#               width = 0,
#               color = 'white', size = .3) +
#geom_line(aes(y=mean),color = 'white',size=.5) +
plot_themes
plot = plot_grid(extinct.plot, time.plot, labels = c('A','B'), align = 'h', axis = 'bt', ncol = 2)
save_plot(paste(plotName,'.pdf',sep=''), plot, ncol=2, nrow = 1, base_aspect_ratio = .9)
}
resultsDir = '../../analysis/breadth_1_density/vaccine/'
resultsDb = paste(resultsDir,'results.sqlite',sep='')
comboDb = dbConnect(SQLite(), dbname = resultsDb)
initExtension(comboDb)
vaccineDF = dbGetQuery(comboDb, 'SELECT * FROM pooled_results')
baseLineFlux = vaccineDF$meanFluxRate[vaccineDF$vaccinationRate==0 & vaccineDF$fluLike==1]
vaccineDF$cumulativeIncidence = vaccineDF$cumulativeIncidence/50000000
vaccineDF$acceleration = vaccineDF$meanFluxRate - mean(baseLineFlux)
vaccineDF$vaccinationRate = vaccineDF$vaccinationRate*365
extinctDens = makeExtinctDensity(vaccineDF[vaccineDF$extinct==1,])
summaryDF = ddply(vaccineDF[vaccineDF$tmrcaLimit==0,], .(vaccinationRate), summarise,
mean.drift = mean(cumulativeDrift),
mean.incidence = mean(cumulativeIncidence),
var.drift = var(cumulativeDrift),
var.incidence = var(cumulativeIncidence),
extinct = sum(extinct),
tmrcaLimit = sum(tmrcaLimit),
fluLike = sum(fluLike))
make.extinct.plot(extinctDens, summaryDF, 'extinct_breadth_1', vaccineDF)
cor.test(vaccineDF$vaccinationRate, vaccineDF$cumulativeDrift, method = 'spearman')
cor.test(vaccineDF$vaccinationRate, vaccineDF$cumulativeIncidence, method = 'spearman')
setwd("/Volumes/frankwen-1/vaccine-manuscript/figures/stat_dyn")
setwd("/Volumes/frankwen-1/vaccine-manuscript/figures/stat_dyn")
library(RSQLite)
library(ggplot2)
library(gridExtra)
library(grid)
library(scales)
library(viridis)
library(cowplot)
library(tidyverse)
library(Hmisc)
textSize = 12
pointSize = 1.0
lineSize = 1
dynamicDir = '../../analysis/breadth_1_density/vaccine/'
staticDir = '../../analysis/static_density/vaccine/'
resultsDirs = c(dynamicDir,staticDir)
plot_themes  = 	theme_classic() +
theme(axis.line = element_line(size=1)) +
theme(axis.ticks = element_line(size=0.5)) +
theme(axis.ticks.length = unit(-0.1,'cm')) +
theme(axis.title.x=element_text(size=textSize)) +
theme(axis.text.x=element_text(size= textSize, margin=margin(5,5,5,5,'pt'))) +
theme(axis.title.y=element_text(size= textSize)) +
theme(axis.text.y=element_text(size= textSize, margin=margin(5,5,5,5,'pt'))) +
theme(plot.title=element_text(size=textSize+2)) +
theme(plot.margin=unit(c(4,4,0,4),'mm')) +
theme(legend.title=element_text(size=textSize)) +
theme(legend.text=element_text(size=textSize)) +
theme(legend.position ='bottom') +
theme(legend.direction='horizontal') +
theme(legend.box.margin = margin(0,0,0,0,'mm')) +
theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
theme(axis.line = element_blank())
percentile = function(percentile){
function(x) quantile(x, percentile, na.rm=T)
}
makePlot = function(summaryDF, vaccineDF, plotName){
pd = position_dodge(width=.005)
plot1 = ggplot(data = summaryDF, aes(x=vaccinationRate,y=meanDrift)) +
stat_summary(data = vaccineDF, aes(color = sim, y = cumulativeDrift),
fun.data = "mean_cl_boot",
geom = 'errorbar',
size = .5) +
# geom_errorbar(data = vaccineDF, aes(color = sim, y = cumulativeDrift),
#               stat = 'summary',
#               fun.ymin = percentile(.05),
#               fun.ymax = percentile(.95),
#               width = 0,
#               size = .4,
#               position = pd
# ) +
geom_point(aes(color = sim), size=.7) +
# geom_ribbon(data = vaccineDF, aes(color = sim, fill = sim, y = cumulativeDrift),
#               stat = 'summary',
#               fun.ymin = percentile(.05),
#               fun.ymax = percentile(.95),
#               #width = 0,
#               size = .3,
#               #position = pd,
#               alpha= .05
#               ) +
xlab('Vaccination coverage') +
ylab('Cumulative antigenic evolution') +
#geom_smooth(data = vaccineDF, aes(colour = sim, y=cumulativeDrift), size=0.5) +
scale_color_brewer(palette='Set1') +
guides(colour= guide_legend('',title.position='top')) +
#geom_smooth(data = fluDF, aes(colour=factor(sim), y=fluDrift), size=0.5, linetype = 'dashed', show_guide=FALSE) +
theme(panel.border = element_rect(colour = "black", fill=NA, size=.2)) +
theme(axis.ticks = element_line(size=.1)) +
ylim(c(0,30)) +
plot_themes
plot2 = ggplot(data = summaryDF, aes(x=vaccinationRate,y=meanInc)) +
stat_summary(data = vaccineDF, aes(color = sim, y = cumulativeIncidence),
fun.data = "mean_cl_boot",
geom = 'errorbar',
size = .5) +
# geom_errorbar(data = vaccineDF, aes(color = sim, y = cumulativeIncidence),
#               stat = 'summary',
#               fun.ymin = percentile(.05),
#               fun.ymax = percentile(.95),
#               width = 0,
#               size = .4,
#               position = pd
# ) +
geom_point(aes(color = sim), size=.7) +
xlab('Vaccination coverage') +
ylab('Cumulative incidence') +
#geom_smooth(data = vaccineDF, aes(colour = sim, y=cumulativeIncidence), size=0.5) +
scale_color_brewer(palette='Set1') +
#scale_color_viridis(discrete=TRUE, labels = c('All simulations', 'Surviving only')) +
guides(color = guide_legend('',title.position='top', override.aes = list(colour='black', linetype=c('solid','dashed')))) +
#geom_smooth(data = fluDF, aes(colour=factor(sim), y=fluInc), size=0.5, linetype = 'dashed',  show_guide=FALSE) +
theme(panel.border = element_rect(colour = "black", fill=NA, size=.2)) +
theme(axis.ticks = element_line(size=.1))  +
ylim(c(0,3)) +
plot_themes
legend = get_legend(plot1)
plot = plot_grid(plot1 + theme(legend.position = 'none'), plot2 + theme(legend.position = 'none'), labels = c('A','B'), align = 'h', ncol = 2)
plot = plot_grid(plot, legend, nrow =2, rel_heights = c(1, .2))
print(plot)
save_plot(paste(plotName,'.pdf',sep=''), plot, ncol=2, nrow = 1, base_aspect_ratio = .9)
}
for(dir in resultsDirs){
resultsDb = paste(dir,'results.sqlite',sep='')
comboDb = dbConnect(SQLite(), dbname = resultsDb)
initExtension(comboDb)
if(dir == resultsDirs[1]){
vaccineDF = dbGetQuery(comboDb, 'SELECT * FROM pooled_results WHERE tmrcaLimit==0')
vaccineDF$sim = 'Dynamic'
}
else{
df2 = dbGetQuery(comboDb, 'SELECT * FROM pooled_results WHERE tmrcaLimit == 0')
df2$sim = 'Static'
}
}
vaccineDF = rbind(vaccineDF, df2)
baseLineFlux = vaccineDF$meanFluxRate[vaccineDF$vaccinationRate==0 & vaccineDF$fluLike==1]
vaccineDF$cumulativeIncidence = vaccineDF$cumulativeIncidence/50000000
vaccineDF$acceleration = vaccineDF$meanFluxRate - mean(baseLineFlux)
summaryDF = vaccineDF %>%
group_by(vaccinationRate, vaccineImmuneBreadth, sim) %>%
summarise(meanDrift = mean(cumulativeDrift),
meanInc = mean(cumulativeIncidence))
fluDF = vaccineDF %>%
filter(fluLike == 1) %>%
group_by(vaccinationRate, vaccineImmuneBreadth,sim) %>%
summarise(fluDrift = mean(cumulativeDrift),
fluInc = mean(cumulativeIncidence))
zerovacrow = summaryDF[summaryDF$vaccinationRate == 0,]
zerovacrow$sim = 'Static'
summaryDF = rbind(summaryDF, zerovacrow)
zerovac_append = vaccineDF %>% filter(vaccinationRate == 0) %>% mutate(sim = 'Static')
vaccineDF = rbind(vaccineDF, zerovac_append)
makePlot(summaryDF, vaccineDF, 'stat_dyn')
stsumm = summaryDF %>% filter(sim == 'Static') %>% rename(sdrift = meanDrift, stinc = meanInc)
dynsumm = summaryDF %>% filter(sim=='Dynamic') %>% rename(ddrift = meanDrift, dinc = meanInc)
outsumm = merge(stsumm,dynsumm, by='vaccinationRate') %>%
select(vaccinationRate,ddrift,sdrift,stinc,dinc) %>%
mutate(dbig = ddrift > sdrift, ddiff = ddrift - sdrift, idiff=dinc-stinc)
outsumm
showdiff = function(rate){
dat = vaccineDF %>% filter(vaccinationRate == toString(rate))
a = dat %>% filter(sim=='Dynamic') %>% pull(cumulativeDrift) %>% smean.cl.boot()
b = dat %>% filter(sim=='Dynamic') %>% pull(cumulativeIncidence) %>% smean.cl.boot()
c = dat %>% filter(sim=='Static') %>% pull(cumulativeDrift) %>% smean.cl.boot()
d = dat %>% filter(sim=='Static') %>% pull(cumulativeIncidence) %>% smean.cl.boot()
out = do.call(rbind,list(a,b,c,d)) %>% data.frame()
out$sim = c('Dynamic','Dynamic', 'Static','Static')
out$stat = c('evo','inc','evo','inc')
return(out)
}
showdiff(0.085)
cor.test(vaccineDF$vaccinationRate, vaccineDF$cumulativeDrift, method = 'spearman')
cor.test(vaccineDF$vaccinationRate, vaccineDF$cumulativeIncidence, method = 'spearman')
wilcox.test(vaccineDF$cumulativeDrift[vaccineDF$sim=='Dynamic'], vaccineDF$cumulativeDrift[vaccineDF$sim=='Static'], alternative = 'less')
wilcox.test(vaccineDF$cumulativeIncidence[vaccineDF$sim=='Dynamic'], vaccineDF$cumulativeIncidence[vaccineDF$sim=='Static'], alternative = 'less')
setwd("/Volumes/frankwen-1/vaccine-manuscript/figures/VE")
library(tidyverse)
library(cowplot)
textSize = 12
plot_themes  =	theme_classic() +
theme(axis.ticks = element_line(size=.5, color = 'black'),
axis.ticks.length = unit(-4,'pt'),
axis.text.x=element_text(size = textSize, color='black', margin=margin(7,7,0,7,'pt')),
axis.text.y=element_text(size = textSize, color='black', margin=margin(7,7,7,0,'pt')),
axis.title=element_text(size= textSize, color='black'),
plot.title=element_text(size=textSize+2, color='black'),
plot.margin=unit(c(9,9,9,9),'pt'),
legend.margin=margin(l = 8, unit='pt'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.line = element_blank()
)
format_VE = function(data){
VEs = data %>% filter(str_detect(X1, 't-0') | str_detect(X1, 'Social'))
VEs = VEs %>%
mutate(rate = str_extract(X1, '..\\%'),
benefit = substr(X1, 1,7)) %>%
gather(key = simtype, value = VE, Static_5:Dynamic_1) %>%
separate(simtype, into = c('simtype','breadth'), sep = '_') %>%
mutate(benefit = str_trim(benefit),
rate = str_trim(rate),
VE = str_replace_all(VE,'\\*',''))
return(VEs)
}
dat = read_csv('or_forplot.csv') %>% select(-name)
coefs_raw = dat[2*(1:(nrow(dat)/2))-1,]
confint_raw = dat[2*(1:(nrow(dat)/2)),]
confint_raw$X1 = coefs_raw$X1
VEs = format_VE(coefs_raw) %>% mutate(VE = as.numeric(VE))
CIs = format_VE(confint_raw) %>%
separate(VE, into = c('lowerCI','upperCI'), sep = ' - ') %>%
mutate(lowerCI = str_replace(lowerCI,'\\(','') %>% as.numeric(),
upperCI = str_replace(upperCI,'\\)','') %>% as.numeric())
lowerbound = -1
VE_forplot = merge(VEs,CIs) %>%
mutate(rate = as.character(rate)) %>%
mutate(VE = 1-VE, upperCI_tmp = 1-lowerCI, lowerCI_tmp = 1-upperCI) %>%
select(-upperCI, -lowerCI) %>%
rename(upperCI = upperCI_tmp, lowerCI = lowerCI_tmp) %>%
filter(breadth==1) %>%
mutate(rate = factor(rate, levels= c( '1%', '5%', '10%', '20%', '30%'))) %>%
mutate(lower = ifelse(lowerCI < lowerbound, lowerbound, NA),
label_location = ifelse(lowerCI<lowerbound, lowerbound+.1, NA),
low_label = ifelse(lowerCI < lowerbound, round(lowerCI,2), NA),
lowerCI = ifelse(is.na(lower), lowerCI, lower))
pd = position_dodge(width=.5)
privateplot = ggplot(VE_forplot %>% filter(benefit == 'Private'), aes(x=rate,y=VE, color = simtype)) +
geom_errorbar(aes(ymin = lowerCI, ymax=upperCI), width=.2, position=pd) +
#geom_text(aes(y=label_location, label = low_label), color = 'black', position = position_dodge(width = 1), size = 3) +
geom_point(position = pd, size = 1)  +
ylim(-.05,1) +
scale_color_brewer(palette = 'Set1',name='Type') +
# geom_segment(aes(xend=rate,y=0, yend=lowerCI, color=simtype, group = interaction(simtype, rate)),
#   arrow = arrow(type='closed', angle=8, length = unit(0.2,'inches')),
#   position = pd, size=1, show.legend= FALSE) +
coord_flip() +
ylab("Private benefit (1 - Odds ratio)") +
xlab("Vaccination coverage") + plot_themes
arrowdata = VE_forplot %>%
mutate(lower = lower-.05)%>%
filter(benefit=='Private') %>%
mutate(arrowstart = ifelse(!is.na(lower), 0, NA)) %>%
gather(key = type, value=value, arrowstart, lower) %>%
select(rate, value, simtype, lowerCI) %>%
arrange(rate, simtype)
arrows = geom_line(data = arrowdata,
aes(x=rate, y = value, group = interaction(rate, simtype)),
arrow=arrow(type='closed', angle=15, length = unit(0.1,'inches')), position=pd,
size=0, show.legend= FALSE)
privateplot = privateplot #+ arrows
socialplot = ggplot(VE_forplot %>% filter(benefit == 'Social'), aes(x=rate,y=VE, color = simtype)) +
geom_errorbar(aes(ymin = lowerCI, ymax=upperCI), width=.2, position=pd) +
geom_point(position = pd, size=1) +
ylim(-.05,1) +
scale_color_brewer(palette = 'Set1', name='Type') +
coord_flip() +
ylab("Social benefit (1 - Odds ratio)") +
xlab("Vaccination coverage") + plot_themes
legend = get_legend(socialplot + theme(legend.position ='bottom'))
outrow = plot_grid(socialplot + theme(legend.position = 'none'),
privateplot +  theme(legend.position = 'none'),
labels=c('A', 'B',''), nrow = 2)
outplot = plot_grid(outrow, legend, ncol=1, rel_heights = c(1,.04))
save_plot("VE.pdf", outplot, nrow=2, base_aspect_ratio = 1.8, base_height=2.5)
